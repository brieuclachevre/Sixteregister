// schema.prisma

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

generator client {
    provider             = "prisma-client-py"
    recursive_type_depth = 5
}

model Sport {
    id           Int     @id @default(autoincrement())
    sport        String
    teams        Team[]
    nbPlayersMin Int     @default(1)
    nbPlayersMax Int     @default(300)
    isCollective Boolean @default(true)
    nbOfTeams    Int     @default(64)
    admins       User[]
}

enum TeamStatus {
    Waiting
    PrincipalList
    Validated
}

model Team {
    id                 Int           @id @default(autoincrement())
    name               String
    participants       Participant[]
    status             TeamStatus
    createdAt          DateTime      @default(now())
    sportId            Int
    sport              Sport         @relation(fields: [sportId], references: [id])
    teamAdminUserId    Int
    admin              User          @relation(fields: [teamAdminUserId], references: [id])
    schoolId           Int
    school             School        @relation(fields: [schoolId], references: [id])
    amountPaidInCents  Int           @default(0)
    amountToPayInCents Int           @default(0)
    Payment            Payment[]
}

enum EnumUserStatus {
    UserStatus
    AdminStatus
    SuperAdminStatus
}

enum Gender {
    F
    M
    preferNotToSay
}

enum ClassementTennis {
    NC
    C40
    C305
    C304
    C303
    C302
    C301
    C30
    C155
    C154
    C153
    C152
    C151
    C15
    C56
    C46
    C36
    C26
    C16
    C0
}

enum ArmeEscrime {
    Sabre
    Epee
    Fleuret
}

model User {
    id           Int            @id @default(autoincrement())
    email        String         @unique //TODO: add email validation
    password     String
    firstname    String
    lastname     String
    mobile       String
    teams        Team[]
    schoolId     Int
    school       School         @relation(fields: [schoolId], references: [id])
    status       EnumUserStatus @default(UserStatus)
    sportAdminId Int?
    sportAdmin   Sport?         @relation(fields: [sportAdminId], references: [id])
    Payment      Payment[]
}

model Participant {
    id                Int               @id @default(autoincrement())
    gender            Gender
    firstname         String
    lastname          String
    email             String            @unique
    dateOfBirth       DateTime
    charteIsValidated Boolean
    chartePassword    String
    createdAt         DateTime          @default(now())
    isCaptain         Boolean
    licenceID         String
    packId            Int
    pack              Pack              @relation(fields: [packId], references: [id])
    schoolId          Int
    school            School            @relation(fields: [schoolId], references: [id])
    teamId            Int
    team              Team              @relation(fields: [teamId], references: [id])
    products          Product[]         @relation()
    isVegan           Boolean           @default(false)
    hasAllergies      Boolean           @default(false)
    certificateLink   String?
    charteEmailSent   Boolean           @default(false)
    certificateOK     Boolean           @default(false)
    weight            Float?
    mailHebergeur     String?
    classementTennis  ClassementTennis?
    classementTT      Float?
    armeVoeu1         ArmeEscrime?
    armeVoeu2         ArmeEscrime?
    armeVoeu3         ArmeEscrime?
}

model School {
    id           Int           @id @default(autoincrement())
    name         String
    isInIDF      Boolean       @default(false)
    isDeleg      Boolean       @default(false)
    users        User[]
    participants Participant[]
    teams        Team[]
}

model Pack {
    id             Int           @id @default(autoincrement())
    name           String
    participants   Participant[]
    priceInCents   Int           @default(0)
    isAllowedInIDF Boolean       @default(true)
}

model Product {
    id           Int           @id @default(autoincrement())
    name         String
    priceInCents Int
    participants Participant[]
    pictureLink  String
}

enum mailClient {
    SES
    MailGun
}

model GeneralConfig {
    id                       Int        @id @default(autoincrement())
    editionYear              Int
    isRegistrationOpen       Boolean
    isPaymentOpen            Boolean
    canSendEmails            Boolean    @default(true)
    expectedRegistrationDate DateTime
    mailClient               mailClient @default(SES)
}

enum PaymentStatus {
    Pending
    Paid
    Failed
    Canceled
    Forged
    Expired
}

model Payment {
    id            Int           @id @default(autoincrement())
    amountInCents Int
    createdAt     DateTime      @default(now())
    userId        Int
    user          User          @relation(fields: [userId], references: [id])
    teamId        Int
    team          Team          @relation(fields: [teamId], references: [id])
    paymentStatus PaymentStatus
    requestId     String?
    requestUuid   String?
}
